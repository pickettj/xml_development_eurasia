# BASIC PERSIAN DOCUMENT SCHEMA
# James Pickett

# Schema follows some of the EpiDoc guidelines (http://www.stoa.org/epidoc/gl/latest/), and equivalencies are noted in comments.

# Document always refers to the entire textual unit in question (which is sometimes subjective), no matter how many folios.

start = document
document = element document { serial, doc_div+ }

# METADATA
# Unique ID corresonds to metadata contained in relational database.
serial = attribute serial { xsd:int }




# __Diplomatic Annotation__

#  Page number is a milestone element; attribute Folio refers to internal pagination
pg = element pg { folio, empty }
folio = attribute folio { text }
# folio was formerly xml:id, but those can't start with a number. how better to do this? perhaps schematron?

# Document division can refer to any kind of structural divider within a text: paragraph, invocatio, diagonal writing, etc.
doc_div = element div {div_type, divLike, ptr_id? }
# as of now, an optional ID tag in a document division is used for a name or honorific in the top margin that is then referenced in the body texts (often multiple times).
# empty element borrowed from TEI <ptr> (pointer) is used to refer back to this ID: https://tei-c.org/release/doc/tei-p5-doc/en/html/ref-ptr.html
# For when a marginal note is referenced in the main text
ptr_id = attribute xml:id {xsd:ID}
# However, sometimes multiple marks in text reference the same marginal note, so n as a div attribute must be unique, and corresponds to the id in the note.
ptr = element ptr { ptr_target, empty }
ptr_target = attribute target { text }


# divLike lists all the elements that a set of text can contain:
divLike = mixed { ( phrase | diplo | glossed | lb | doc_div | individual | intertext | work | term | ts | location | emic_id | etym | sem | date | pg | flag | honorific | financial | legal | lang | ptr)* }

div_type =
    attribute type { "elevatio" | "heading" | "marginalia" | "section" | "sentence" | "seal" }



# Lines

# When expanded, <lb>, at least as used by the TEI, means "line beginning", and it's typically treated as an empty milestone element, rather than a 
# wrapper element, since semantically it indicates a point between lines (like a milestone marker on a road), and does not contain a line. 
# An easy alternative solution to this high-level problem is simply to rename your <lb> elements as <line> or <l> elements, to make your descriptive markup more 
#faithful to its intended use. XML processors don't know what element names mean, which is why tag abuse isn't an XML error, 
# but life is easier for humans if element and attribute names correspond to what we think they mean intuitively.

lb = element lb { empty }

# Other diplomatic markup
# TEI/Epidoc has a huge number of possible specificatiosn for this: http://www.stoa.org/epidoc/gl/latest/app-alltrans.html
# This schema narrows it down to: mispellings and other irregularities ("orthography"); smudges, tears, creases, or other intrinsic reasons the text is "obscured".

diplo = element diplo { mixed { diploType, intended? } }
diploType = attribute type {"orthography" | "obscured" | "ambig"}
# Optional intended element specifies likely intended word.
intended = attribute indended { text }


# Marginalia references, local to the document: TBD. This is done in TEI using <metamark> (http://tei.oucs.ox.ac.uk/release/doc/tei-p5-doc/en/html/ref-metamark.html).
# Will involve empty element citation-style references, e.g. <s n="note1"/> <e n="note1"/> surrounding the marginal note, and then seomething like <note n="note1"/> in the text.


# __Gloss__
# Formalized commentary for display purposes; comments reserved for informal notes.
glossed = element glossed {target, gloss }
gloss = element gloss {text}
target = element target {text}


# __Thematic Sections__
# The milestone element <ts> ("thematic section) is used for coding the topical structure of document.
# It uses conventions established for medieval diplomatics:
# "The introduction comprises, first, the invocation (invocatio) of God, either by name or through a symbol such as the cross; 
# second, the superscription (intitulatio), giving the name and title of the sender; 
# and third, the address (inscriptio), naming those to whom the document is directed, 
# usually followed by a formula of greeting (salutatio)."

ts = element ts { ts_type, empty }
ts_type = attribute type { "rescript" | "salutatio" | "narratio" | "apprecatio" | "inscriptio" | "intitulatio" | "invocatio" | "tracking" }


# __Transcription Annotation__
# Dealing with transcription problems in the text. Not the same as the ortho element, which describes the text; this element assists with the transcription and interpretration process.
# "unclear" if the text itself is difficult to make out; "meaning" if the letters are legibible, but the meaning is unclear.
flag = element flag { flag_type, text }
flag_type = attribute type { "unclear" | "meaning" }


# __Historical Annotation__
# These categories overlap with tables in the relational database. However, this markup will mostly be used to extract information from the documents (at least initially).
# For the most part, I will not be manually marking strings that I know are common and can easily be captured by a machine.

# Individuals 
# Corresponding relational database table titled "Prosopography."
# This is used exclusively for proper nouns, i.e. when the name of an individual is referenced. (Previously I coded implicit references as well: no longer.)

individual =
    element individual {ind_id?,
        mixed { (role | honorific | location | flag | lb)* }
    }
ind_id = attribute id { text }

 
# Locations
# Corresponding to relational database table titled "Gazetteer."
# Places, institutions, etc.

location = element location { loc_id?, text }
loc_id = attribute id { text }
# will eventually be an idref#
emic_id = element emic_id { emic_type, text }
emic_type = attribute type { text }


# Social Role
# Any generalized term that refers to a person (e.g. military rank, confession, ethnicity).

role = element role { role_id?, text }
role_id = attribute id { xsd:int }

# Knowledge Form


# __Technical Terminology__
# consistency / definitional issues: what qualifies as a "technical term"?
term = element term { term_type?, text }
term_type = attribute type { "admin" | "genre" | "injunction" | "request" }
# "injunction" is an order from a superior to an inferior; "request" is the inverse, a missive 


# Textual Works
# Tag for anytime the title of another work (usually a classical source of some kind) is invoked in the text.
work = element work {text}

# Intertextual Reference
# Separate ids for Qur'an, Hadith, and references to the Bibliography (text_id)
# This element wraps around the entire quoted text.
intertext =
    element intertext {
        mixed { quran_id | hadith_id | text_id }
    }
quran_id = attribute quran_id { text }
hadith_id = attribute hadith_id { text }
text_id = attribute text_id { text }


# Honorifics
# This is a loose category (not currently corresponding to any table in the relational database) designed to produce a lexicon of common honorifics.
# Targets the smallest possible unit.
# Should vaguely have an individual in mind.

honorific =
    element honorific {
        mixed { pg? | honType?}
    }
honType = attribute type { "superior" | "inferior"}  

# Stock Phrases
# Tag for extracting stock bureaucratic phrases for later use.
phrase = element phrase {mixed {phraseType?, lb*} }
phraseType = attribute type { "admin" | "literary" | "cermonial" }


# __Linguistic Annotation__

# Etymology
# Names of places and people not marked: only words for which the semantic meaning is central.
# This primarily targets unusual occurances; Arabic loan words are ubiquitous in Persian and (presumably) easy to mark by machine, so not marked with this element.
# Meanwhile, Indic loan words and Turkic loan words are relatively uncommon in writing, and a lexicon created by this element may be useful down the road.
etym = element etym { etym_type, text }
etym_type = attribute type { "turkic" | "indic" | "english" | "russian" }


# Semantics
# Flags words with an unusual meaning. Specifically, this generally marks etymologically Arabic and Persian words used with a meaning specific to the regional context (i.e. Central or South Asia).

sem = element sem {text}

# Language Flag
# This element flags linguistic features that may later be useful for systemic analysis (e.g. calques, grammar).

lang = element lang { lang_type, text }
lang_type =
   attribute type {
        list { ("turk_calque" | "indic_calque" | "syntax" | "tajik")+ } }
# "tajik" marks any construction that is specific to Central Asia, but not directly borrowed from Turkic.



# __Date__ format is day/month/year for all three
date = element date { (jul_date | greg_date | hij_date), text }

# On the topic of dates, we encourage you to explore the xsd:dateTime datatype and consider its 
# usefulness for you in defining what a date should actually look like in your document. It uses ISO 
# format, and it's particularly useful if you have to do date arithmetic, or determine the day of the
# week for a particular date. The downside is that ISO 8601 dates are always Gregorian because they
# refer to the date as a fact, and not as recorded in a particular document. Some developers will write
# the date as it appears in the document (perhaps according to the Julian calendar) and then include
# the ISO date (necessarily Gregorian) as an attribute value. 

# On the topic of dates, we encourage you to explore the xsd:dateTime datatype and consider its
# usefulness for you in defining what a date should actually look like in your document. It uses ISO
# format, and it's particularly useful if you have to do date arithmetic, or determine the day of the
# week for a particular date. The downside is that ISO 8601 dates are always Gregorian because they
# refer to the date as a fact, and not as recorded in a particular document. Some developers will write
# the date as it appears in the document (perhaps according to the Julian calendar) and then include
# the ISO date (necessarily Gregorian) as an attribute value. 

jul_date = attribute jul_date { text }
greg_date = attribute greg_date { text }
hij_date = attribute hij_date { text }

        
# __Financial__ data, e.g. prices, salaries, etc.
financial = element financial { financial_type, text }
financial_type = attribute type { "salary" | "price" | "debt" }
# __Legal__ tracks legal terms
legal = element legal { text }
